TODO

[debug] Got from ELM: ">NO DATA", state: :connected_configured
[error] Lost conenction to car's ECU! Restarting...
[info] Attemting to connect to ELM on serial port: "/dev/cu.usbserial-1420" with opts: [speed: 38400, data_bits: 8, parity: :none, stop_bits: 1, framing: {Circuits.UART.Framing.Line, [separator: "\r"]}, active: true]
[error] GenStateMachine Elm.Connector terminating
** (exit) exited in: GenServer.call(nil, {:open, "/dev/cu.usbserial-1420", [speed: 38400, data_bits: 8, parity: :none, stop_bits: 1, framing: {Circuits.UART.Framing.Line, [separator: "\r"]}, active: true]}, 5000)
    ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
    (elixir 1.11.3) lib/gen_server.ex:1017: GenServer.call/3
    (pi_dash 0.1.0) lib/pi_dash/elm/elm_connector.ex:301: Elm.Connector.open_serial/1
    (pi_dash 0.1.0) lib/pi_dash/elm/elm_connector.ex:100: Elm.Connector.handle_event/4
    (stdlib 3.14) gen_statem.erl:1168: :gen_statem.loop_state_callback/11
    (stdlib 3.14) proc_lib.erl:226: :proc_lib.init_p_do_apply/3
State: {:connect, %Elm.Data{elm_queue: nil, elm_version: nil, last_sent_command: nil, port: nil, protocol_number: nil, supported_pids: [], uart_port_pid: nil}}
Callback mode: :handle_event_function
Postponed events: []
Last event: {:cast, :open_connection}
Queued events: []
State: {:connect, %Elm.Data{elm_queue: nil, elm_version: nil, last_sent_command: nil, port: nil, protocol_number: nil, supported_pids: [], uart_port_pid: nil}}
[error] GenServer #PID<0.453.0> terminating
** (stop) exited in: GenServer.call(nil, {:open, "/dev/cu.usbserial-1420", [speed: 38400, data_bits: 8, parity: :none, stop_bits: 1, framing: {Circuits.UART.Framing.Line, [separator: "\r"]}, active: true]}, 5000)
    ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
Last message: {:EXIT, #PID<0.442.0>, {:noproc, {GenServer, :call, [nil, {:open, "/dev/cu.usbserial-1420", [speed: 38400, data_bits: 8, parity: :none, stop_bits: 1, framing: {Circuits.UART.Framing.Line, [separator: "\r"]}, active: true]}, 5000]}}}
State: {:state, {#PID<0.453.0>, Supervisor.Default}, :one_for_one, {[Obd.PidSup], %{Obd.PidSup => {:child, #PID<0.454.0>, Obd.PidSup, {Obd.PidSup, :start_link, []}, :permanent, 5000, :worker, [Obd.PidSup]}}}, :undefined, 0, 5, [], 0, Supervisor.Default, {:ok, {%{intensity: 0, period: 5, strategy: :one_for_one}, [%{id: Obd.PidSup, start: {Obd.PidSup, :start_link, []}}]}}}
[error] GenServer #PID<0.472.0> terminating
** (stop) exited in: :gen_statem.call(Elm.Connector, :get_state, :infinity)
    ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
    (stdlib 3.14) gen.erl:319: :gen.do_for_proc/2
    (stdlib 3.14) gen_statem.erl:671: :gen_statem.call_dirty/4
    (pi_dash 0.1.0) lib/pi_dash_web/channels/room_channel.ex:58: PiDashWeb.RoomChannel.handle_in/3
    (phoenix 1.5.7) lib/phoenix/channel/server.ex:315: Phoenix.Channel.Server.handle_info/2
    (stdlib 3.14) gen_server.erl:689: :gen_server.try_dispatch/4
    (stdlib 3.14) gen_server.erl:765: :gen_server.handle_msg/6
    (stdlib 3.14) proc_lib.erl:226: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{event: "status:elm_status", join_ref: "3", payload: %{}, ref: "100", topic: "room:dash"}
State: %Phoenix.Socket{assigns: %{}, channel: PiDashWeb.RoomChannel, channel_pid: #PID<0.472.0>, endpoint: PiDashWeb.Endpoint, handler: PiDashWeb.UserSocket, id: nil, join_ref: "3", joined: true, private: %{log_handle_in: :debug, log_join: :info}, pubsub_server: PiDash.PubSub, ref: nil, serializer: Phoenix.Socket.V2.JSONSerializer, topic: "room:dash", transport: :websocket, transport_pid: #PID<0.466.0>}
